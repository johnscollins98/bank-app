generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Budget {
  id        Int      @id @default(autoincrement())
  category  String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([userId, category], map: "category_user_id_unique")
}

model BudgetOverride {
  id        Int      @id @default(autoincrement())
  category  String
  amount    Float
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([userId, category, date], map: "category_user_id_date_unique")
}

model UserSettings {
  id                 Int                @id @unique @default(autoincrement())
  monthBarrierOption MonthBarrierOption
  day                Int
  userId             String             @unique
  User               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MonthBarrierOption {
  LAST
  CALENDAR
}

// Auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserSettings   UserSettings?
  BudgetOverride BudgetOverride[]
  Budget         Budget[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
